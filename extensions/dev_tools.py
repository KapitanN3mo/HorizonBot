import os
import importlib
import subprocess
import core
import dt
from permissions import *
from assets import emojis
import disnake
import memory_profiler


class ExecuteModule(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @commands.slash_command()
    async def ping(self, inter: disnake.CommandInteraction):
        """–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å"""
        emb = disnake.Embed(title='üèì PONG!', colour=disnake.Colour.green())
        work_time = dt.get_msk_datetime() - core.Bot.start_time
        work_seconds = work_time.seconds
        work_minutes = work_seconds // 60
        work_seconds -= work_minutes * 60
        work_hours = work_minutes // 60
        work_minutes -= work_hours * 60
        work_days = work_hours // 24
        work_hours -= work_days * 24
        emb.add_field(name='‚åö–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã',
                      value=f'```{str(work_days) + " –¥–Ω–µ–π " if work_time.days > 0 else ""}'
                            f'{str(work_hours) + " —á–∞—Å–æ–≤ " if work_hours > 0 else ""}'
                            f'{str(work_minutes) + " –º–∏–Ω—É—Ç " if work_minutes > 0 else ""}'
                            f'{str(work_seconds) + " —Å–µ–∫—É–Ω–¥ " if work_seconds > 0 else ""}```')
        emb.add_field(name='üéõ –ó–∞–¥–µ—Ä–∂–∫–∞', value=f'```{str(self.bot.latency * 1000).split(".")[0]} ms```')
        emb.add_field(name='üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏', value=f'```{str(memory_profiler.memory_usage()[0])[:4]} Mb```')
        gr_info = core.Bot.get_garbage_info()
        emb.add_field(name='üì¶ –ë—É—Ñ–µ—Ä –∑–∞–¥–∞—á',
                      value=f'```–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—á–∏—Å—Ç–∫–∞: {(dt.get_msk_datetime() - gr_info["last_work"]).seconds} —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥\n'
                            f'–ü–µ—Ä–∏–æ–¥ –æ—á–∏—Å—Ç–∫–∏: {gr_info["delay"]} —Å–µ–∫—É–Ω–¥\n'
                            f'–û—á–∏—â–µ–Ω–æ –∑–∞–¥–∞—á: {gr_info["deleted_task_count"]}\n'
                            f'–¢–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ –∑–∞–¥–∞—á: {gr_info["work_task_count"]}```')
        emb.set_footer(text=f'–°—Ç–∞—Ç—É—Å', icon_url=self.bot.user.display_avatar)
        emb.timestamp = dt.get_msk_datetime()
        await inter.send(embed=emb)

    @commands.slash_command()
    @developer_permission_required
    async def execute(self, inter: disnake.CommandInteraction):
        """–ü–µ—Ä–µ–¥–∞—ë—Ç –∫–æ–¥ Python –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"""
        await inter.response.send_modal(modal=ExecuteModalWindow())

    @commands.slash_command()
    @developer_permission_required
    async def run_script(self, inter: disnake.CommandInteraction, script_name, *args):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫—Ä–∏–ø—Ç"""
        if script_name + '.py' in os.listdir('scripts'):
            script = importlib.import_module(f'scripts.{script_name}')
            script = script.Script(self.bot)
            self.bot.loop.create_task(script.run(inter, *args))
        else:
            await inter.send(f'{emojis.exclamation}`–°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!`')

    @commands.slash_command()
    @developer_permission_required
    async def scripts(self, inter: disnake.CommandInteraction):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤"""
        embed = disnake.Embed(title='–°–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤', colour=disnake.Colour(0x00FF9E))
        text = ''
        for script in os.listdir('scripts'):
            if script == '__init__.py' or script == '__pycache__':
                continue
            text += script.replace('.py', '') + '\n'
        embed.description = text
        await inter.send(embed=embed)


class ExecuteModalWindow(disnake.ui.Modal):
    def __init__(self):
        cmp = [
            disnake.ui.TextInput(
                label='–í–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥',
                custom_id='code_input',
                style=disnake.TextInputStyle.long,
                required=True
            )
        ]
        super(ExecuteModalWindow, self).__init__(title='Python execute', components=cmp)

    async def callback(self, interaction: disnake.ModalInteraction, /) -> None:
        await interaction.response.defer()
        proc = subprocess.Popen(['python', '-c', interaction.text_values['code_input']], stdin=subprocess.PIPE,
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE)
        stdout, stderr = proc.communicate()
        if stdout.decode("utf-8"):
            await interaction.send(f'–í–∞—à –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n```{stdout.decode("utf-8")}```')
        elif stderr.decode("utf-8"):
            await interaction.send(f'–û—à–∏–±–∫–∞:\n```{stderr.decode("utf-8")}```')
        else:
            await interaction.send(f'{emojis.exclamation}`–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è`')
        proc.kill()


def setup(bot):
    bot.add_cog(ExecuteModule(bot))
